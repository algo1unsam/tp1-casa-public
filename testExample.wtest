import casaPepeJulian.*

describe "La casa" {

  test "Hacer que se rompa algo de 1000 pesos de la casa, aumentando el monto de reparación." {
    casa.montoReparacion(1000)
    assert.that(casa.tieneViveresSuficientes())
    assert.that(casa.necesitaReparaciones())
    assert.notThat(casa.estaEnOrden())
  }

test "para una cuenta vacía con 20 pesos de costo por operación, si se deposita 1000 pesos, el saldo queda en 980 pesos." {
	// Preparo el test
	cuentaConGasto.costoOperacion(20)
	// Acción
	cuentaConGasto.depositar(1000)
	// Varificación
	assert.equals(980, cuentaConGasto.saldo())
}

test "suponiendo que configuramos la cuenta combinada así: la primaria es la cuenta con gastos con 50 pesos de costo de operación y la secundaria es la cuenta corriente, ya con 500 pesos de saldo"{
	cuentaCombinada.primaria(cuentaConGasto)
	cuentaConGasto.costoOperacion(50)
	cuentaCombinada.secundaria(cuentaCorriente)
	cuentaCorriente.saldo(500)
	cuentaCombinada.depositar(100)
	cuentaCombinada.extraer(200)
	assert.equals(cuentaCombinada.primaria().saldo(), 50)
	assert.equals(cuentaCombinada.secundaria().saldo(),300 )
	assert.equals(cuentaCombinada.saldo(),350 )
}

test "probar un gasto"{
casa.cuenta(cuentaCorriente)
cuentaCorriente.saldo(500)
casa.montoReparacion(499)
assert.equals(1, casa.cuenta().saldo())
}

}

